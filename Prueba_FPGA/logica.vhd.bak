library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
USE WORK.mi_paquete.ALL;
USE work.paquete_uart.all;
use work.roms_paquete.all;
entity logica is
generic (
				constant cant_char_1: integer range 0 to 100:=11;-- Cantidad de caracteres ROM 1
				constant cant_char_2: integer range 0 to 100:=30;-- Cantidad de caracteres ROM 2
				constant cant_char_3: integer range 0 to 100:=11;-- Cantidad de caracteres ROM 3
				constant cant_char_4: integer range 0 to 100:=43;-- Cantidad de caracteres ROM 4
				constant cant_char_5: integer range 0 to 100:=14;-- Cantidad de caracteres ROM 5
				constant cant_char_6: integer range 0 to 100:=44 -- Cantidad de caracteres ROM 6
			);
	port	
	(
		clk_50Mhz  : 	in std_logic; --50mhz
		reset      : 	in std_logic; -- será el pulsador 1
		pul_1		  :	in std_logic:='0'; -- 8 dato a enviar al field
		pul_2		  :	in std_logic:='0'; -- 50 dato a enviar al field
		pul_3		  :	in std_logic:='0'; -- 123 dato a enviar al field
		data_rx	  :	in std_logic_vector(7 downto 0);
		done_char_tx		:	in std_logic;
		enable_tx  	: 	out std_logic:='0';
		send_tx	  	: 	out std_logic:='0';
		leds		  	: 	out std_logic_vector(7 downto 0):=x"00";-- leds
		data_tx   	: 	out std_logic_vector(7 downto 0):=x"00"-- que se envía
	);
end entity;

architecture a_logica of logica is
signal clk_tx,enable_s,send_s: std_logic;
type maquina_comando	is (Envio_AT,Controlo_OK_0,
								ENVIO_ROM_AT_1,Controlo_OK_1,ENVIO_ROM_AT_2,Controlo_OK_2,
								ENVIO_ROM_AT_3,Controlo_OK_3,ENVIO_ROM_AT_4,Controlo_OK_4,
								ENVIO_ROM_AT_5,Controlo_OK_5,ENVIO_ROM_AT_6,Controlo_OK_6);
signal AT_s	: maquina_comando;
type leo_ROM is (sig_char,end_char);
signal lectura:leo_ROM;
signal Address_4,address_2,address_6: std_logic_vector (5 downto 0):="000000";
signal address_1,address_5,address_3: std_logic_vector (4 downto 0):="00000";	
signal caracter_AT_1,caracter_AT_2,caracter_AT_3,caracter_AT_4,caracter_AT_5,caracter_AT_6: std_logic_vector(7 downto 0):=x"00";
signal clk_AT,bandera_OK,bandera_tx,clk_20s,send,config_listo,send_ready: std_logic:='0';
signal valor_medido: integer range 0 to 1000;
signal unidades,decenas,centenas: integer range 0 to 10;
signal cnt2 : integer range 1 to 3;

begin

-- proceso para que el tx_uart solo envíe una vez.

control_tx : Process(done_char_tx,bandera_tx)
			 Begin
				if bandera_tx = '1' then
					if done_char_tx ='1' then enable_S <= '0'; end if; 
					if done_char_tx ='0' then  send_s <='1'; enable_S <='1'; end if;
				else Send_s <= '0';
				end if;
			 End Process;
send_tx <= send_s;
enable_tx <= enable_S;
-- habilitador de envío -- generic 4000 para testbench 
ut_clk_AT: contador generic map (5000,14) port map (clk_50MHz,reset,clk_AT,open); -- 11 x clk_tx -- 11*434 -- 4775 

ut_clk_20s:contador generic map (1000000000,33) port map (clk_50MHz,reset,clk_20s,open); -- 1000M para que sea cada 10 s
-- comandos AT ROMs
Com_AT_1: 	ROM_AT_1 port map (address_1,clk_AT,caracter_AT_1);
Com_AT_2: 	ROM_AT_2 port map (address_2,clk_AT,caracter_AT_2);
Com_AT_3: 	ROM_AT_3 port map (address_3,clk_AT,caracter_AT_3);
Com_AT_4: 	ROM_AT_4 port map (address_4,clk_AT,caracter_AT_4);
Com_AT_5: 	ROM_AT_5 port map (address_5,clk_AT,caracter_AT_5);
Com_AT_6: 	ROM_AT_6 port map (address_6,clk_AT,caracter_AT_6);

pulsadores: -- Metodo de medida o de entrada del valor medido
process(pul_1,pul_2,pul_3) -- control de pulsadores
begin 
	if Pul_1 ='1' and Pul_2 ='0' and Pul_3 ='0'then  valor_medido <= 8;
	elsif Pul_1 ='0' and Pul_2 ='1' and Pul_3 ='0' then  valor_medido <= 50;
	elsif Pul_1 ='0' and Pul_2 ='0' and Pul_3 ='1' then  valor_medido <= 123;
	else valor_medido<=0;
	end if;
end process;

uni_dec_cent: 
Process (valor_medido)
variable cont_u_d_c : integer range 1 to 3;
variable unidades_v,decenas_v,centenas_v: integer range 0 to 10:=0;
begin
	if valor_medido < 10 then 
		cont_u_d_c:=1; 
		unidades_v := valor_medido;
	elsif 10 <= valor_medido and valor_medido <= 99 then 	
		cont_u_d_c:=2;
		centenas_v	:=0;
		decenas_v 	:= (valor_medido/10);
		unidades_v	:= (valor_medido - (decenas_v*10));
	elsif	100<= valor_medido and valor_medido <=999 then 
		cont_u_d_c:=3;
		centenas_v	:= (valor_medido/100);
		decenas_v 	:= (valor_medido - (centenas_v*100))/10;
		unidades_v	:= (valor_medido - (decenas_v*10) - (centenas_v*100));
	end if;
unidades <= unidades_v;
decenas <= decenas_v;
centenas <= centenas_v;
cnt2 <= cont_u_d_c;
end process;
-- control de envio de datos -- 
-- send <= clk_20s; -- cada 20 s
send <= pul_3 or pul_2; -- envío con pulsadores 
WIFI_Conection:
Process (clk_AT,send,reset)
variable n: natural range 1 to 8:=1;
variable	cnt: natural range 0 to 100:=0;
Begin
--if clk_10s='1' then 
if send = '0' then 
	leds <= "10000000"; cnt:=0; n:=1; 
	if config_listo ='1' then AT_s <= EnvIO_ROM_AT_3;
	else AT_s <= EnvIO_AT; end if;
elsif reset= '1' then 
	leds <= "10000000"; cnt:=0; n:=1; 
	if config_listo ='1' then AT_s <= EnvIO_ROM_AT_3;
	else AT_s <= EnvIO_AT; end if;
elsif rising_edge(clk_AT)then
	Case AT_s is
-----------------------------------------
		when Envio_AT 	=>  -- Enviar AT
			case  n is
				when 1 => 	data_tx <=x"41"; -- A
								bandera_tx <= '1'; n:=n+1;
				when 2 => 	bandera_tx <= '0'; n:=n+1;
				when 3 => 	data_tx <=x"54"; -- T
								bandera_tx <= '1'; n:=n+1; 
				when 4 => 	bandera_tx <= '0'; n:=n+1;
				when 5 => 	data_tx <=x"0d"; -- \r
								bandera_tx <= '1'; n:=n+1;
				when 6 => 	bandera_tx <= '0'; n:=n+1;
				when 7 => 	data_tx <=x"0a"; -- \n
								bandera_tx <= '1'; n:=n+1;
				when 8 => 	At_s <= Controlo_OK_0;
								bandera_tx <='0'; n:=1;  
								leds <= "00000001"; -- prendo el led para indicar primera transmisión			 
			end case;
--------------------------------------------
		when Controlo_OK_0	=> -- Control de OK 0 
					if data_rx = x"4B" then -- controlo K
						bandera_OK <='1'; 
						AT_s <= EnvIO_ROM_AT_1; -- siguiente estado
						leds <= "00000000";
					end if;
-----------------------------------------
		when EnvIO_ROM_AT_1 	=> 		-- Envio ROM_AT_1
			bandera_OK <='0';
			if n<2 then n:=n+1;
			else 
				case lectura is
					when sig_char	=> 
						if cnt = cant_char_1 then 
							if bandera_tx ='1' then lectura <= end_char; bandera_tx <= '0';cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= caracter_AT_1; 
							end if;
						else 
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= caracter_AT_1; 
							end if;
						end if;
					when end_char =>
						if cnt=cant_char_1+1 then 
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= x"0d"; -- agrego el \r
							end if;					
						elsif cnt=cant_char_1+2 then 
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= x"0a"; -- agrego el \n
							end if;					
						elsif cnt =cant_char_1+3 then 
							At_s <= Controlo_OK_1; 
							leds <= "00000010";
							lectura <= sig_char; cnt:=cnt+1;
						end if;
					when others => At_s <= EnvIO_AT;
				end case;
				n:=1 ; end if;
			if cnt=cant_char_1+4 then
				address_1<=std_logic_vector (to_unsigned (cnt,5));
				bandera_tx <= '0'; cnt:=0;
			else 
				address_1<=std_logic_vector (to_unsigned (cnt,5));
			end if;
-------------------------------------------
-- establecer generics		
		when Controlo_OK_1	=>
					if data_rx = x"4B" then -- controlo K
						bandera_OK <='1'; 
						AT_s <= EnvIO_ROM_AT_2; -- siguiente estado
						leds <= "00000000";
					end if;
-------------------------------------------
		when EnvIO_ROM_AT_2 	=> -- Envio ROM_AT_2
		bandera_OK <='0';
		if n<2 then n:=n+1;
		else 		
			case lectura is
					when sig_char	=> 
						if cnt = cant_char_2 then 
							if bandera_tx ='1' then lectura <= end_char; bandera_tx <= '0';cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= caracter_AT_2; 
							end if;
						else 
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= caracter_AT_2; 
							end if;
						end if;
					when end_char =>
						if cnt=cant_char_2+1 then 
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= x"0d"; -- agrego el \r
							end if;					
						elsif cnt=cant_char_2+2 then 
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	bandera_tx <= '1'; data_tx <= x"0a"; -- agrego el \n
							end if;					
						elsif cnt =cant_char_2+3 then 
							At_s <= Controlo_OK_2; 
							leds <= "00000100";
							lectura <= sig_char; cnt:=cnt+1;
						end if;
					when others => At_s <= EnvIO_AT;
				end case; n:=1; end if;
			if cnt=cant_char_2+4 then
				address_2<=std_logic_vector (to_unsigned (cnt,6));
				bandera_tx <= '0'; cnt:=0; config_listo <='1';
			else 
				address_2<=std_logic_vector (to_unsigned (cnt,6));
			end if;
-------------------------------------------
		when Controlo_OK_2 =>
					if data_rx = x"4B" then -- controlo K
						bandera_OK <='1'; 
						AT_s <= EnvIO_ROM_AT_3; -- siguiente estado
						leds <= "00000000";
					end if;
-------------------------------------------
		when EnvIO_ROM_AT_3 	=> -- Envio ROM_AT_3
		bandera_OK <='0';
		if n<2 then n:=n+1;
		else 	
			case lectura is
				when sig_char	=> 
					if cnt = cant_char_3 then 
						if bandera_tx ='1' then lectura <= end_char; bandera_tx <= '0';cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_3; 
						end if;
					else 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_3; 
						end if;
					end if;
				when end_char =>
					if cnt=cant_char_3+1 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0d"; -- agrego el \r
						end if;					
					elsif cnt=cant_char_3+2 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0a"; -- agrego el \n
						end if;					
					elsif cnt =cant_char_3+3 then 
						At_s <= Controlo_OK_3; 
						leds <= "00001000";
						lectura <= sig_char; cnt:=cnt+1;
					end if;
				when others => At_s <= EnvIO_AT;
			end case; n:=1; end if;
			if cnt=cant_char_3+4 then
				address_3<=std_logic_vector (to_unsigned (cnt,5));
				bandera_tx <= '0'; cnt:=0; 
			else 
				address_3<=std_logic_vector (to_unsigned (cnt,5));
			end if;
-------------------------------------------
		when Controlo_OK_3	=> -- Control de OK 3
					if data_rx = x"4B" then -- controlo K
						bandera_OK <='1'; 
						AT_s <= EnvIO_ROM_AT_4; -- siguiente estado
						leds <= "00000000";
					end if;
-------------------------------------------
		when EnvIO_ROM_AT_4 	=> -- Envio ROM_AT_4
				bandera_OK <='0';
			if n<2 then n:=n+1;
			else 	
			case lectura is
				when sig_char	=> 
					if cnt = cant_char_4 then 
						if bandera_tx ='1' then lectura <= end_char; bandera_tx <= '0';cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_4; 
						end if;
					else 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_4; 
						end if;
					end if;
				when end_char =>
					if cnt=cant_char_4+1 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0d"; -- agrego el \r
						end if;					
					elsif cnt=cant_char_4+2 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0a"; -- agrego el \n
						end if;					
					elsif cnt =cant_char_4+3 then 
						At_s <= Controlo_OK_4; 
						leds <= "00010000";
						lectura <= sig_char; cnt:=cnt+1;
					end if;
				when others => At_s <= EnvIO_AT;
			end case; n:=1; end if;
			if cnt=cant_char_4+4 then
				address_4<=std_logic_vector (to_unsigned (cnt,6));
				bandera_tx <= '0'; cnt:=0; 
			else 
				address_4<=std_logic_vector (to_unsigned (cnt,6));
			end if;
-------------------------------------------
		when Controlo_OK_4	=> -- Control de OK 4
					if data_rx = x"4B" then -- controlo K
						bandera_OK <='1'; 
						AT_s <= EnvIO_ROM_AT_5; -- siguiente estado
						leds <= "00000000";
					end if;
-------------------------------------------
		when EnvIO_ROM_AT_5 	=> -- Envio ROM_AT_5
-- considerar pulsadores ----
		bandera_OK <='0';
		if n<2 then n:=n+1;
		else 	
			case lectura is
				when sig_char	=> 
					if cnt = cant_char_5 then 
						if bandera_tx ='1' then lectura <= end_char; bandera_tx <= '0';cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_5; 
						end if;
					else 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_5; 
						end if;
					end if;
				when end_char =>
					if cnt=cant_char_5+1 then
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else
							bandera_tx <='1';
							if valor_medido < 10 then data_tx <= x"37"; -- 7
							elsif 10 <= valor_medido and valor_medido <= 99 then data_tx <= x"38"; -- 8
							elsif	100<= valor_medido and valor_medido <=999 then data_tx <= x"39";-- 9
							end if;
						end if;
					elsif cnt=cant_char_5+2 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0d"; -- agrego el \r
						end if;					
					elsif cnt=cant_char_5+3 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0a"; -- agrego el \n
						end if;					
					elsif cnt =cant_char_5+4 then 
						At_s <= Controlo_OK_5; 
						leds <= "00100000";
						lectura <= sig_char; cnt:=cnt+1;
					end if;
				when others => At_s <= EnvIO_AT;
			end case; n:=1; end if;
			if cnt=cant_char_5+5 then
				address_5<=std_logic_vector (to_unsigned (cnt,5));
				bandera_tx <= '0'; cnt:=0; 
			else 
				address_5<=std_logic_vector (to_unsigned (cnt,5));
			end if;
-------------------------------------------
		when Controlo_OK_5	=> -- Control de OK 5
					if data_rx = x"3E" then -- controlo >
						AT_s <= EnvIO_ROM_AT_6; -- siguiente estado
						leds <= "00000000";
						bandera_OK <='1';
					end if;
-------------------------------------------
		when EnvIO_ROM_AT_6 	=> -- Envio ROM_AT_6
		bandera_OK <='0';
		if n<2 then n:=n+1;
		else 	
		case lectura is
				when sig_char	=> 
					if cnt = cant_char_6 then 
						if bandera_tx ='1' then lectura <= end_char; bandera_tx <= '0';cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_6; 
						end if;
					else 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= caracter_AT_6; 
						end if;
					end if;
				when end_char =>
-- agrego el valor medido en la cadena
					if cnt2 = 1 then 
						if cnt = cant_char_6+1 then
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cant_char_6+4; 
							else	
								bandera_tx <= '1';	
								data_tx	<=std_LOGIC_VECTOR(to_unsigned(unidades+48,8));
							end if;
						end if;	
					elsif cnt2 = 2 then
						if cnt = cant_char_6+1 then
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	
								bandera_tx <= '1';	
								data_tx	<=std_LOGIC_VECTOR(to_unsigned(decenas+48,8));
							end if;	
						elsif cnt = cant_char_6+2 then
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cant_char_6+4; 
							else	
								bandera_tx <= '1';	
								data_tx	<=std_LOGIC_VECTOR(to_unsigned(unidades+48,8));
							end if;
						end if;	
					elsif cnt2 = 3 then
						if cnt = cant_char_6+1 then
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	
								bandera_tx <= '1';	
								data_tx	<=std_LOGIC_VECTOR(to_unsigned(centenas+48,8));
							end if;	
						elsif cnt = cant_char_6+2 then
							if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
							else	
								bandera_tx <= '1';	
								data_tx	<=std_LOGIC_VECTOR(to_unsigned(decenas+48,8));
							end if;
						elsif cnt = cant_char_6+3 then
							if bandera_tx ='1' then  bandera_tx <= '0';cnt:=cant_char_6+4; 
							else	
								bandera_tx <= '1';	
								data_tx	<=std_LOGIC_VECTOR(to_unsigned(unidades+48,8));
							end if;
						end if;	
					end if;
					if cnt=cant_char_6+4 then cnt:=cnt+1;
					elsif cnt=cant_char_6+5 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0d"; -- agrego el \r
						end if;					
					elsif cnt=cant_char_6+6 then 
						if bandera_tx ='1' then  bandera_tx <= '0'; cnt:=cnt+1; 
						else	bandera_tx <= '1'; data_tx <= x"0a"; -- agrego el \n
						end if;					
					elsif cnt =cant_char_6+7 then 
						At_s <= Controlo_OK_6; 
						leds <= "01000000";
						lectura <= sig_char; cnt:=cnt+1;
					end if;
				when others => At_s <= EnvIO_AT;
			end case; n:=1; end if;
			if cnt=cant_char_6+8 then
				address_6<=std_logic_vector (to_unsigned (cnt,6));
				bandera_tx <= '0'; cnt:=0; 
			else 
				address_6<=std_logic_vector (to_unsigned (cnt,6));
			end if;
-------------------------------------------
		when Controlo_OK_6	=> -- Control de OK 6
					if data_rx = x"4B" then -- controlo K
						bandera_OK <='1'; 
						AT_s <= EnvIO_ROM_AT_3; -- siguiente estado
						leds <= "00000000";
					end if;
		when others => AT_s <= EnvIO_AT;
	end case; 
end if;
End Process;
End a_logica;
